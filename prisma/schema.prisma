generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  PENDING
  ACTIVE
}

enum UserRole {
  ADMIN
  USER_FIZ
  USER_YUR
  SUPERADMIN
  VIEWERADMIN
}

model User {
  id       Int        @id @default(autoincrement())
  name     String
  email    String
  password String
  status   UserStatus
  role     UserRole
  regionId Int
  region   Region     @relation(fields: [regionId], references: [id])
  sessions Session[]
  orders   Order[]
}

model Region {
  id       Int     @id @default(autoincrement())
  name     String
  name_ru  String?
  name_eng String?

  user User[]
}

model Session {
  id     Int      @id @default(autoincrement())
  ip     String
  userId Int
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])
}

model Level {
  id               Int             @id @default(autoincrement())
  name             String
  name_ru          String?
  name_eng         String?
  product          orderProduct[]
  productLevel     ProductLevel[]
  masterProfession MasterProduct[]
  basket           Basket[]
}

model Comment {
  id         Int          @id @default(autoincrement())
  message    String
  orderId    Int
  masterStar MasterStar[]
  order      Order        @relation(fields: [orderId], references: [id])
}

model MasterStar {
  id        Int     @id @default(autoincrement())
  commentId Int
  star      Float
  masterId  Int
  comment   Comment @relation(fields: [commentId], references: [id])
  master    Master  @relation(fields: [masterId], references: [id])
}

model Brand {
  id       Int     @id @default(autoincrement())
  name     String
  name_ru  String?
  name_eng String?
  tools    Tools[]
}

model Capacity {
  id       Int     @id @default(autoincrement())
  name     String
  name_ru  String?
  name_eng String?
  tools    Tools[]
}

model Size {
  id       Int     @id @default(autoincrement())
  name     String
  name_ru  String?
  name_eng String?
  tools    Tools[]
}

model Master {
  id            Int             @id @default(autoincrement())
  fullname      String
  phone         String
  isActive      Boolean
  MasterProduct MasterProduct[]
  image         String?
  star          Float           @default(0)
  about         String
  orders        Order[]
  MasterStar    MasterStar[]
}

model MasterProduct {
  id              Int     @id @default(autoincrement())
  minWorkingHours Int?
  productId       Int
  levelId         Int
  price_hour      Float?
  price_day       Float?
  experience      Int
  masterId        Int
  level           Level   @relation(fields: [levelId], references: [id])
  product         Product @relation(fields: [productId], references: [id])
  master          Master  @relation(fields: [masterId], references: [id])
}

model ProductLevel {
  id             Int     @id @default(autoincrement())
  productId      Int
  levelId        Int
  product        Product @relation(fields: [productId], references: [id])
  level          Level   @relation(fields: [levelId], references: [id])
  minWorkingHour Int
  price_hour     Int
  price_day      Int
}

model Product {
  id               Int             @id @default(autoincrement())
  name             String
  name_ru          String?
  name_eng         String?
  image            String?
  isActive         Boolean
  orderProduct     orderProduct[]
  masterProfession MasterProduct[]
  productLevel     ProductLevel[]
  tools            Tools[]
  basket           Basket[]
}

model Tools {
  id           Int            @id @default(autoincrement())
  name         String
  name_ru      String?
  name_eng     String?
  description  String
  price        Int
  quantity     Int
  code         String
  brandId      Int?
  isActive     Boolean        @default(true)
  capacityId   Int?
  sizeId       Int?
  image        String?
  orderProduct orderProduct[]
  products     Product[]
  basket       Basket[]
  brand        Brand?         @relation(fields: [brandId], references: [id])
  capacity     Capacity?      @relation(fields: [capacityId], references: [id])
  size         Size?          @relation(fields: [sizeId], references: [id])
}

enum PaymentType {
  CLICK
  PAYME
}

enum OrderStatus {
  PENDING
  FINISHED
}

model Order {
  id           Int            @id @default(autoincrement())
  total        Float
  location     String
  address      String
  date         DateTime       @default(now())
  paymentType  PaymentType
  withDelivery Boolean
  status       OrderStatus
  extraComment String?
  userId       Int
  maters       Master[]
  comment      Comment[]
  orderProduct orderProduct[]
  user         User           @relation(fields: [userId], references: [id])
}

model orderProduct {
  id          Int       @id @default(autoincrement())
  isActive    Boolean
  workingTime Int
  price       Float
  count       Int
  toolId      Int?
  levelId     Int?
  orderId     Int
  productId   Int?
  timeUnit    OrderType
  order       Order     @relation(fields: [orderId], references: [id])
  tool        Tools?    @relation(fields: [toolId], references: [id])
  level       Level?    @relation(fields: [levelId], references: [id])
  product     Product?  @relation(fields: [productId], references: [id])
}

enum OrderType {
  HOUR
  DAY
}

model Basket {
  id         Int       @id @default(autoincrement())
  userId     Int
  productId  Int?
  timeUnit   OrderType
  toolsId    Int?
  levelId    Int?
  product    Product?  @relation(fields: [productId], references: [id])
  tools      Tools?    @relation(fields: [toolsId], references: [id])
  levels     Level?    @relation(fields: [levelId], references: [id])
  totalPrice Int
  workTime   Int
}

model FAQ {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}

model Contact {
  id      Int    @id @default(autoincrement())
  name    String
  surname String
  phone   String
  address String
  message String
}

model generalInfo {
  id    Int    @id @default(autoincrement())
  email String
  link  String
  phone String
}
